package dashboard

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

func Scrape() string {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl --cookie-jar ./.cookieJar "https://gql.poolplayers.com/graphql" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0" -H "Accept: */*" -H "Accept-Language: en-US,en;q=0.5" --compressed -H "Referer: https://league.poolplayers.com/" -H "content-type: application/json" -H "apollographql-client-name: MemberServices" -H "apollographql-client-version: 3.10.1-2807" -H "authorization: " -H "Origin: https://league.poolplayers.com" -H "DNT: 1" -H "Connection: keep-alive" -H "Sec-Fetch-Dest: empty" -H "Sec-Fetch-Mode: cors" -H "Sec-Fetch-Site: same-site" -H "TE: trailers" --data-raw "[{""operationName"":""login"",""variables"":{""input"":{""username"":""berryscottr@gmail.com"",""password"":""`$cooterBear17"",""remember"":true}},""query"":""mutation login(`$input: LoginInput!) {\\n  loginJSON(input: `$input) {\\n    token\\n    suspendedAreas {\\n      loName\\n      loNumber\\n      loPhone\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n""}]"

	body := strings.NewReader("[{operationName:login,variables:{input:{username:berryscottr@gmail.com,password:`$cooterBear17,remember:true}},query:mutation login(`$input: LoginInput!) {\n  loginJSON(input: `$input) {\n    token\n    suspendedAreas {\n      loName\n      loNumber\n      loPhone\n      __typename\n    }\n    __typename\n  }\n}\n}]")
	req, err := http.NewRequest("POST", "https://gql.poolplayers.com/graphql", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	req.Header.Set("Referer", "https://league.poolplayers.com/")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Apollographql-Client-Name", "MemberServices")
	req.Header.Set("Apollographql-Client-Version", "3.10.1-2807")
	req.Header.Set("Authorization", "")
	req.Header.Set("Origin", "https://league.poolplayers.com")
	req.Header.Set("Dnt", "1")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("Te", "trailers")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Fatalf("status code error: %d %s", resp.StatusCode, resp.Status)
	}

	// Load the HTML document
	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	// Find the review items
	doc.Find(".question-summary .summary").Each(func(i int, s *goquery.Selection) {
		title := s.Find("H3").Text()
		fmt.Println(i, title)
	})
	return ""
}
